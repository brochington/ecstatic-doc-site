(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return y}));var r=n(0),s=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=s.a.createContext({}),m=function(e){var t=s.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return s.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},d=s.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=m(n),d=r,y=p["".concat(a,".").concat(d)]||p[d]||u[d]||o;return n?s.a.createElement(y,i(i({ref:t},l),{},{components:n})):s.a.createElement(y,i({ref:t},l))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var l=2;l<o;l++)a[l]=n[l];return s.a.createElement.apply(null,a)}return s.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return m}));var r=n(3),s=n(7),o=(n(0),n(114)),a={id:"system",title:"System",sidebar_label:"System",slug:"system"},i={unversionedId:"elements/system",id:"elements/system",isDocsHomePage:!1,title:"System",description:'Systems in Ecstatic are just functions that are associated with a group of Components. Whenever the systems are "run", the function is called on every Entity that has all the Components associated with that System.',source:"@site/docs/elements/system.md",slug:"/elements/system",permalink:"/ecstatic-doc-site/docs/elements/system",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/elements/system.md",version:"current",sidebar_label:"System",sidebar:"someSidebar",previous:{title:"TrackedComponent",permalink:"/ecstatic-doc-site/docs/elements/tracked-component"},next:{title:"Spinning Rectangles",permalink:"/ecstatic-doc-site/docs/examples/spinning-rectangles"}},c=[{value:"Defining a system",id:"defining-a-system",children:[]},{value:"System function arguments",id:"system-function-arguments",children:[]}],l={toc:c};function m(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Systems"),' in Ecstatic are just functions that are associated with a group of Components. Whenever the systems are "run", the function is called on every ',Object(o.b)("inlineCode",{parentName:"p"},"Entity")," that has all the ",Object(o.b)("inlineCode",{parentName:"p"},"Components")," associated with that ",Object(o.b)("inlineCode",{parentName:"p"},"System"),"."),Object(o.b)("h2",{id:"defining-a-system"},"Defining a system"),Object(o.b)("p",null,"Systems are added to the ",Object(o.b)("inlineCode",{parentName:"p"},"World")," instance with the ",Object(o.b)("inlineCode",{parentName:"p"},"world.addSystem()")," method."),Object(o.b)("p",null,'Systems are "run" with the ',Object(o.b)("inlineCode",{parentName:"p"},"world.systems.run()")," method."),Object(o.b)("p",null,"The order that systems are added specifies the order in which they are run."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"const setTransformComps = [Position, Rotation, Scale, GameBody];\n\nconst setTransform = (args) => {\n  // do system-y stuff;\n  const { components } = args;\n  const position = components.get(Position);\n  const rotation = components.get(Rotation);\n  const scale = components.get(Scale);\n  const gamebody = components.get(GameBody);\n\n  gamebody.setTransform(position, rotation, scale);\n};\n\nworld.addSystem(setTransformComps, settransform);\n\n// elsewhere, probably in a render loop.\nworld.systems.run();\n")),Object(o.b)("h2",{id:"system-function-arguments"},"System function arguments"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"const mySystem = (args) => {\n  const {\n    /**\n     * The current entity being iterated.\n     */\n    entity,\n    /**\n     * The components that belong to the entity\n     */\n    components,\n    /**\n     * The World instance.\n     * Use this to access other entities.\n     */\n    world,\n\n    /**\n     * The index of the current entity in all entities to be run on this system.\n     */\n    index,\n    /**\n     * This size of all the entities will run on this system.\n     */\n    size,\n    /**\n     * Is the first entity to be iterated on this run of a system.\n     * Helpful for setting up state that is the same for all entities only once.\n     */\n    isFirst,\n    /**\n     * Is the last entity to be iterated on this run of a system.\n     * Can be helpful to tear down anything that should be dealt with after all the entites have ran.\n     */\n    isLast,\n  } = args;\n}\n")))}m.isMDXComponent=!0}}]);