(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return y}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),d=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,y=p["".concat(c,".").concat(m)]||p[m]||b[m]||i;return n?o.a.createElement(y,r(r({ref:t},l),{},{components:n})):o.a.createElement(y,r({ref:t},l))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,c[1]=r;for(var l=2;l<i;l++)c[l]=n[l];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},90:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(3),o=n(7),i=(n(0),n(114)),c={id:"entity",title:"Entity",sidebar_label:"Entity",slug:"entity"},r={unversionedId:"elements/entity",id:"elements/entity",isDocsHomePage:!1,title:"Entity",description:"Entity API Docs",source:"@site/docs/elements/entity.md",slug:"/elements/entity",permalink:"/ecstatic-doc-site/docs/elements/entity",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/elements/entity.md",version:"current",sidebar_label:"Entity",sidebar:"someSidebar",previous:{title:"World",permalink:"/ecstatic-doc-site/docs/elements/world"},next:{title:"Component",permalink:"/ecstatic-doc-site/docs/elements/component"}},s=[{value:"Creating an Entity.",id:"creating-an-entity",children:[]},{value:"Adding and Removing Components",id:"adding-and-removing-components",children:[]},{value:"Entity Tags",id:"entity-tags",children:[]},{value:"State of an Entity",id:"state-of-an-entity",children:[]},{value:"Entity Lifecycle Methods",id:"entity-lifecycle-methods",children:[{value:"onCreate",id:"oncreate",children:[]},{value:"onComponentAdd",id:"oncomponentadd",children:[]},{value:"onTrackedComponentUpdate",id:"ontrackedcomponentupdate",children:[]},{value:"onComponentRemove",id:"oncomponentremove",children:[]},{value:"onDestroy",id:"ondestroy",children:[]}]}],l={toc:s};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/entity.default.html"},"Entity API Docs")),Object(i.b)("p",null,"In the ECS pattern, an ",Object(i.b)("inlineCode",{parentName:"p"},"Entity")," is in essence just a unique id that is used to associate different ",Object(i.b)("inlineCode",{parentName:"p"},"Components")," together. ",Object(i.b)("inlineCode",{parentName:"p"},"Components"),' ARE NOT stored "on" or "in" an ',Object(i.b)("inlineCode",{parentName:"p"},"Entity"),". "),Object(i.b)("p",null,"Ecstatic's ",Object(i.b)("inlineCode",{parentName:"p"},"Entity")," objects allow manipulation and access to info associated to the ",Object(i.b)("inlineCode",{parentName:"p"},"Entity"),"'s id."),Object(i.b)("h2",{id:"creating-an-entity"},"Creating an Entity."),Object(i.b)("p",null,"There are two methods of creating a new ",Object(i.b)("inlineCode",{parentName:"p"},"Entity"),"."),Object(i.b)("h4",{id:"1-worldcreateentity"},"1. ",Object(i.b)("inlineCode",{parentName:"h4"},"world.createEntity()")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"const entityInstance = world.createEntity()\n")),Object(i.b)("p",null,"Creating a new ",Object(i.b)("inlineCode",{parentName:"p"},"Entity")," in the way is a little easier, in that you do not need to import the ",Object(i.b)("inlineCode",{parentName:"p"},"Entity")," class constructor. "),Object(i.b)("h4",{id:"2-new-entityworld"},"2. ",Object(i.b)("inlineCode",{parentName:"h4"},"new Entity(world)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from '@brochington/ecstatic';\n\nconst entityInstance = new Entity(world); // world instance must be passed in.\n")),Object(i.b)("p",null,'The largest benefit to being able to just "new up" an ',Object(i.b)("inlineCode",{parentName:"p"},"Entity"),", is that you may now easily extend the ",Object(i.b)("inlineCode",{parentName:"p"},"Entity")," class. This is the way in which you can add lifecycle methods to your ",Object(i.b)("inlineCode",{parentName:"p"},"Entity"),' (more info below). It\'s also nice to be able to add more context to, or "init" an ',Object(i.b)("inlineCode",{parentName:"p"},"Entity")," by creating a wrapper class."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from '@brochington/ecstatic';\nimport { Square, Position } from 'components';\n\nclass SquareEntity extends Entity {\n  constructor(size, x, y, world) {\n    super(world);\n\n    this\n      .add(new Square(size))\n      .add(new Position(x, y));\n  }\n}\n\n")),Object(i.b)("h2",{id:"adding-and-removing-components"},"Adding and Removing Components"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Components")," may be added and removed via the ",Object(i.b)("inlineCode",{parentName:"p"},"add")," and ",Object(i.b)("inlineCode",{parentName:"p"},"remove")," methods."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"class MyComponent {}\n\nconst entity = new Entity(world);\n\n// Pass in a new instance of the Component.\nentity.add(new MyComponent());\n\n// Pass in the Component's class Constructor\nentity.remove(MyComponent);\n\n")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/entity.default.html#add"},"entity.add() API Doc")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/entity.default.html#remove"},"entity.remove() API Doc")),Object(i.b)("h2",{id:"entity-tags"},"Entity Tags"),Object(i.b)("p",null,"Tags may be added to entities in much the same way as components. A tag is just a string."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"const myEntity = world.createEntity().addTag('AwesomeTag');\n")),Object(i.b)("p",null,"Entities can be queried by tag"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"// If a tag is known to be unique, with only one associated entity\nconst myEntity = world.getTagged('AwesomeTag');\n\n// If there might be multiple entities that share a tag\nconst taggedEntities = world.getAllTagged('AwesomeTag');\n\n")),Object(i.b)("p",null,"If you are going to use tags to help in locating entities across an app, it's recommended that you use constant or enum values as the keys so that if they change, they can be updated in a central location"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'// tags.js\nexport const MY_TAG = "awesome-tag";\n\n\n// elsewhere.js\nimport { MY_TAG } from "tags";\n\nconst entityWithTag = world.createEntity().addTag(MY_TAG);\n')),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/entity.default.html#addtag"},"entity.add() API Doc")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/entity.default.html#removetag"},"entity.remove() API Doc")),Object(i.b)("h2",{id:"state-of-an-entity"},"State of an Entity"),Object(i.b)("p",null,"In order to support things like deferred destruction, an ",Object(i.b)("inlineCode",{parentName:"p"},"Entity")," is essential a state machine. The states are:"),Object(i.b)("h4",{id:"creating"},"creating"),Object(i.b)("p",null,"This is the initial state of the ",Object(i.b)("inlineCode",{parentName:"p"},"Entity"),". Can be used is systems to run initialization code. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"function someSystem({ entity }) {\n  if (entity.state === 'creating') {\n    // do init logic here.\n  }\n}\n")),Object(i.b)("h4",{id:"created"},"created"),Object(i.b)("p",null,"The state of the ",Object(i.b)("inlineCode",{parentName:"p"},"Entity")," after all ",Object(i.b)("inlineCode",{parentName:"p"},"Systems")," have run over the entity a single time."),Object(i.b)("h4",{id:"destroying"},"destroying"),Object(i.b)("p",null,"It's often helpful to defer the actual destruction of an entity until the ",Object(i.b)("inlineCode",{parentName:"p"},"Systems")," have had a chance to run cleanup logic over it. This state is triggered only if the ",Object(i.b)("inlineCode",{parentName:"p"},"Entity")," is destroyed via the ",Object(i.b)("inlineCode",{parentName:"p"},"entity.destroy()")," method, and NOT with the ",Object(i.b)("inlineCode",{parentName:"p"},"entity.destoryImmediately()")," method."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"function someSystem({ entity }) {\n  if (entity.state === 'destroying') {\n    // clean up your room.\n  }\n}\n")),Object(i.b)("h4",{id:"destroyed"},"destroyed"),Object(i.b)("p",null,"The entity is destroyed, and should probably be released and left for the GC to clean up."),Object(i.b)("h4",{id:"error"},"error"),Object(i.b)("p",null,"This state is reached when something wrong has happend..."),Object(i.b)("h2",{id:"entity-lifecycle-methods"},"Entity Lifecycle Methods"),Object(i.b)("p",null,"That's right, An ",Object(i.b)("inlineCode",{parentName:"p"},"Entity")," can have lifecycle methods! Each one is added by extending the ",Object(i.b)("inlineCode",{parentName:"p"},"Entity")," class."),Object(i.b)("h3",{id:"oncreate"},"onCreate"),Object(i.b)("p",null,"Called when the entity is created, ",Object(i.b)("em",{parentName:"p"},"after")," it has been added to the world."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from '@brochington/ecstatic';\n\nclass LifecycleEntity extends Entity {\n  onCreate(world) {\n    // do stuff.\n  }\n}\n\n")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/entity.default.html#oncreate"},"API Docs")),Object(i.b)("h3",{id:"oncomponentadd"},"onComponentAdd"),Object(i.b)("p",null,"Called when a ",Object(i.b)("inlineCode",{parentName:"p"},"Component")," is added to the ",Object(i.b)("inlineCode",{parentName:"p"},"Entity"),". The world and the added component are passed in an arg object."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from '@brochington/ecstatic';\n\nclass LifecycleEntity extends Entity {\n  onComponentAdd({ world, component }) {\n    // do stuff.\n  }\n}\n\n")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/entity.default.html#oncomponentadd"},"API Docs")),Object(i.b)("h3",{id:"ontrackedcomponentupdate"},"onTrackedComponentUpdate"),Object(i.b)("p",null,"Called when something on a ",Object(i.b)("inlineCode",{parentName:"p"},"TrackedComponent")," is updated. The world and the added component are passed in an arg object."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from '@brochington/ecstatic';\n\nclass LifecycleEntity extends Entity {\n  onTrackedComponentUpdate({ world, component }) {\n    // do stuff.\n  }\n}\n\n")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/entity.default.html#ontrackedcomponentupdate"},"API Docs")),Object(i.b)("h3",{id:"oncomponentremove"},"onComponentRemove"),Object(i.b)("p",null,"Called when a ",Object(i.b)("inlineCode",{parentName:"p"},"Component")," is removed from the entity. The world and the added component are passed in an arg object."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from '@brochington/ecstatic';\n\nclass LifecycleEntity extends Entity {\n  onComponentRemove({ world, component }) {\n    // do stuff.\n  }\n}\n\n")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/entity.default.html#oncomponentremove"},"API Docs")),Object(i.b)("h3",{id:"ondestroy"},"onDestroy"),Object(i.b)("p",null,"Called when the ",Object(i.b)("inlineCode",{parentName:"p"},"Entity")," is destroyed. Currently this happens when the entity is in the ",Object(i.b)("inlineCode",{parentName:"p"},"destroying")," state."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from '@brochington/ecstatic';\n\nclass LifecycleEntity extends Entity {\n  onDestroy(world}) {\n    // do stuff.\n  }\n}\n\n")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/entity.default.html#ondestroy"},"API Docs")))}d.isMDXComponent=!0}}]);