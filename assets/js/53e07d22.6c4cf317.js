(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{114:function(n,e,t){"use strict";t.d(e,"a",(function(){return p})),t.d(e,"b",(function(){return g}));var o=t(0),a=t.n(o);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function c(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?c(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,o,a=function(n,e){if(null==n)return{};var t,o,a={},r=Object.keys(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=a.a.createContext({}),m=function(n){var e=a.a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},p=function(n){var e=m(n.components);return a.a.createElement(l.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return a.a.createElement(a.a.Fragment,{},e)}},u=a.a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,c=n.parentName,l=i(n,["components","mdxType","originalType","parentName"]),p=m(t),u=o,g=p["".concat(c,".").concat(u)]||p[u]||d[u]||r;return t?a.a.createElement(g,s(s({ref:e},l),{},{components:t})):a.a.createElement(g,s({ref:e},l))}));function g(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,c=new Array(r);c[0]=u;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=n,s.mdxType="string"==typeof n?n:o,c[1]=s;for(var l=2;l<r;l++)c[l]=t[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},81:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return c})),t.d(e,"metadata",(function(){return s})),t.d(e,"toc",(function(){return i})),t.d(e,"default",(function(){return m}));var o=t(3),a=t(7),r=(t(0),t(114)),c={id:"spinning-rectangles",title:"Spinning Rectangles",sidebar_label:"Spinning Rectangles",slug:"spinning-rectangles"},s={unversionedId:"examples/spinning-rectangles",id:"examples/spinning-rectangles",isDocsHomePage:!1,title:"Spinning Rectangles",description:"Below is an example of a fully functional implementation of an ECS project.",source:"@site/docs/examples/spinning-rectangles.md",slug:"/examples/spinning-rectangles",permalink:"/ecstatic-doc-site/docs/examples/spinning-rectangles",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/examples/spinning-rectangles.md",version:"current",sidebar_label:"Spinning Rectangles",sidebar:"someSidebar",previous:{title:"System",permalink:"/ecstatic-doc-site/docs/elements/system"},next:{title:"Web Components Calculator",permalink:"/ecstatic-doc-site/docs/examples/web-comp-calc"}},i=[],l={toc:i};function m(n){var e=n.components,t=Object(a.a)(n,["components"]);return Object(r.b)("wrapper",Object(o.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Below is an example of a fully functional implementation of an ECS project."),Object(r.b)("div",null,Object(r.b)("iframe",{src:"https://codesandbox.io/embed/pensive-cloud-db9d8?fontsize=14&hidenavigation=1&theme=dark",style:{width:"100%",height:"800px",border:"0",borderRadius:"4px",overflow:"hidden"},title:"pensive-cloud-db9d8",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"})),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"/* Helpers */\n\nfunction getRandomNumber(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction getRandomColor() {\n  return '#' + Math.floor(Math.random() * 16777215).toString(16); // random color\n}\n\n/* World */\n\nconst { World } = ecstatic;\n\nconst world = new World();\n\n/* Components */\n\nclass Canvas {\n  constructor(elementId, width, height) {\n    this.canvas = document.getElementById(elementId);\n    this.width = width;\n    this.height = height;\n  }\n}\n\nclass Position {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nclass Rotation {\n  count = 0;\n  speed = getRandomNumber(-5, 5);\n  rotation = 0;\n\n  rotate() {\n    this.count += this.speed;\n    this.rotation = (this.count % 360) * (Math.PI / 180);\n  }\n}\n\nclass Scale {\n  scale = getRandomNumber(0, 2);\n}\n\nclass Transform {\n  transform = [1, 0, 0, 1, 0, 0];\n}\n\nclass Color {\n  color = getRandomColor();\n}\n\nclass Rectangle {\n  width = getRandomNumber(10, 200);\n  height = getRandomNumber(10, 200);\n}\n\n/* Systems */\n\nfunction prepareCanvas(args) {\n  const { entity, components } = args;\n  const canvasComp = components.get(Canvas);\n\n  if (entity.state === 'creating') {\n    canvasComp.canvas.width = canvasComp.width;\n    canvasComp.canvas.height = canvasComp.height;\n  }\n\n  const ctx = canvasComp.canvas.getContext('2d');\n  ctx.clearRect(0, 0, canvasComp.width, canvasComp.height);\n}\n\nworld.addSystem([Canvas], prepareCanvas);\n\n//\n\nfunction computeTransform(args) {\n  const { components } = args;\n\n  const { x, y } = components.get(Position);\n  const { scale } = components.get(Scale);\n  const transformComp = components.get(Transform);\n\n  transformComp.transform = [scale, 0, 0, scale, x, y];\n}\n\nworld.addSystem([Position, Scale, Transform], computeTransform);\n\n//\n\nfunction renderRectangle(args) {\n  const { components } = args;\n\n  const { canvas } = components.get(Canvas);\n  const rotationComp = components.get(Rotation);\n  const { transform } = components.get(Transform);\n  const { width, height } = components.get(Rectangle);\n  const { color } = components.get(Color);\n\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n\n  ctx.save();\n\n  ctx.transform(...transform);\n\n  rotationComp.rotate();\n  ctx.rotate(rotationComp.rotation);\n\n  ctx.fillStyle = color;\n  ctx.fillRect(-(width / 2), -(height / 2), width, height);\n\n  ctx.restore();\n}\n\nworld.addSystem([Canvas, Rotation, Transform, Rectangle], renderRectangle);\n\n/* Create Entities, and attach Components to them. */\n\n// the canvas component will be shared across entities.\nconst canvasComp = new Canvas('canvas-1', 800, 600);\n\n[...Array(100)].forEach(() => {\n  const x = getRandomNumber(0, canvasComp.width);\n  const y = getRandomNumber(0, canvasComp.height);\n\n  world\n    .createEntity()\n    .add(canvasComp)\n    .add(new Rectangle())\n    .add(new Position(x, y))\n    .add(new Rotation())\n    .add(new Scale())\n    .add(new Transform())\n    .add(new Color());\n});\n\nfunction render() {\n  world.systems.run();\n\n  window.requestAnimationFrame(render);\n}\n\nrender();\n\n// DOM\n\n// Quick example of what updating component values might look like.\ndocument.querySelector('#change-colors-btn').addEventListener('click', () => {\n  world\n    .grabAll(Color)\n    .forEach(({ component }) => (component.color = getRandomColor()));\n});\n")))}m.isMDXComponent=!0}}]);