(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),d=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,u=p["".concat(r,".").concat(m)]||p[m]||b[m]||o;return n?i.a.createElement(u,s(s({ref:t},l),{},{components:n})):i.a.createElement(u,s({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var l=2;l<o;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},87:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(3),i=n(7),o=(n(0),n(114)),r={id:"basic-setup",title:"Basic Setup",sidebar_label:"Basic Setup",slug:"basic-setup"},s={unversionedId:"getting_started/basic-setup",id:"getting_started/basic-setup",isDocsHomePage:!1,title:"Basic Setup",description:"Check out the Spinning Rectangles example to see the code below applied.",source:"@site/docs/getting_started/basic-setup.md",slug:"/getting_started/basic-setup",permalink:"/ecstatic-doc-site/docs/getting_started/basic-setup",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/getting_started/basic-setup.md",version:"current",sidebar_label:"Basic Setup",sidebar:"someSidebar",previous:{title:"Installation",permalink:"/ecstatic-doc-site/docs/getting_started/installation"},next:{title:"Development",permalink:"/ecstatic-doc-site/docs/development"}},c=[{value:"Creating a World",id:"creating-a-world",children:[]},{value:"Defining and Adding Systems to the <code>World</code>",id:"defining-and-adding-systems-to-the-world",children:[]},{value:"Creating Entities",id:"creating-entities",children:[]},{value:"Creating Component Instances and adding them to an Entity",id:"creating-component-instances-and-adding-them-to-an-entity",children:[]},{value:"Running Systems",id:"running-systems",children:[]},{value:"Querying Entities",id:"querying-entities",children:[]}],l={toc:c};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Check out the ",Object(o.b)("a",{parentName:"p",href:"../examples/spinning-rectangles"},"Spinning Rectangles")," example to see the code below applied."),Object(o.b)("h2",{id:"creating-a-world"},"Creating a World"),Object(o.b)("p",null,"The first thing that must be done is creating an instance of a ",Object(o.b)("inlineCode",{parentName:"p"},"World"),". A World in Ecstatic contains all instances of entities, and also facilitates registering of systems. The ",Object(o.b)("inlineCode",{parentName:"p"},"World"),"'s API methods will be used used to do things like add ",Object(o.b)("inlineCode",{parentName:"p"},"Systems"),", create ",Object(o.b)("inlineCode",{parentName:"p"},"Entities"),", query ",Object(o.b)("inlineCode",{parentName:"p"},"Components"),", and more. "),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/world.default.html"},"World Instance API methods")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { World } from '@brochington/ecstatic';\n\n// Create a new World instance.\nconst world = new World();\n")),Object(o.b)("h2",{id:"defining-and-adding-systems-to-the-world"},"Defining and Adding Systems to the ",Object(o.b)("inlineCode",{parentName:"h2"},"World")),Object(o.b)("p",null,"In Ecstatic, A ",Object(o.b)("inlineCode",{parentName:"p"},"System")," is a function. Associated ",Object(o.b)("inlineCode",{parentName:"p"},"Components")," are defined when the ",Object(o.b)("inlineCode",{parentName:"p"},"System")," is added to the ",Object(o.b)("inlineCode",{parentName:"p"},"World")," via ",Object(o.b)("inlineCode",{parentName:"p"},"world.addSystem()"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},'// Define the components that let the system identify which entities to run on.\n// In other words, if an entity has all the defined components, then the system will be called on it.\nconst systemComponents = [Component1, Component];\n\n// Systems are provided a number of helpful arguments to work on in the function body.\nconst systemFunction = (args) => {\n  const {\n    world, // the world instance\n    entity, // the current entity\n    components, // the current entity\'s components\n    index, // index of which entity of all entities that the system will run over\n    isFirst, // If this is the first entity to run in this system pass\n    isLast, // If this is the last entity to be run over in this system pass.\n    size // The count of entities that match the given system component requirements.\n  } = args;;\n}\n\n\n// Register the components and system function together on the world.\n// This will return a function that should be called in a loop along with\n// all other systems, usually once each "tick".\nworld.addSystem(systemComponents, systemFunction)\n')),Object(o.b)("h2",{id:"creating-entities"},"Creating Entities"),Object(o.b)("p",null,"An ",Object(o.b)("inlineCode",{parentName:"p"},"Entity")," instance my be created in two ways:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Calling ",Object(o.b)("inlineCode",{parentName:"li"},"world.createEntity()"),";")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"const entityInstance = world.createEntity()\n")),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"Calling ",Object(o.b)("inlineCode",{parentName:"li"},"new")," on the ",Object(o.b)("inlineCode",{parentName:"li"},"Entity")," Class Constructor;")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from '@brochington/ecstatic';\n\nconst entityInstance = new Entity(world); // world instance must be passed in.\n")),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Currently, lifecycle methods may only be added to Entities when they are defined via the ",Object(o.b)("inlineCode",{parentName:"p"},"new Entity()"),". "))),Object(o.b)("h2",{id:"creating-component-instances-and-adding-them-to-an-entity"},"Creating Component Instances and adding them to an Entity"),Object(o.b)("p",null,"In Ecstatic, any Class Instance (including functions, see info below) are valid ",Object(o.b)("inlineCode",{parentName:"p"},"Components"),", and should be able to be added as such on to an ",Object(o.b)("inlineCode",{parentName:"p"},"Entity"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"class MyComponent {}\n\nconst myEntity = world.createEntity();\n\nmyEntity.add(new MyComponent());\n")),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},'Note: Since this is Javascript, and "Everything is an Object, even Functions", there is experimental support for using Functions as Components. The use case for exactly why this is helpful is stil be determined, but if you would like to experiment with this, then tread carefully, and let us know your results and suggestions.'))),Object(o.b)("h2",{id:"running-systems"},"Running Systems"),Object(o.b)("p",null,"Run all ",Object(o.b)("inlineCode",{parentName:"p"},"Systems")," added to the ",Object(o.b)("inlineCode",{parentName:"p"},"World")," instance by calling ",Object(o.b)("inlineCode",{parentName:"p"},"world.systems.run()"),". This will traditionally be called in render loop."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"function render() {\n  world.systems.run();\n\n  window.requestAnimationFrame(render);\n}\n\nrender();\n")),Object(o.b)("h2",{id:"querying-entities"},"Querying Entities"),Object(o.b)("p",null,"There are many methods available on the ",Object(o.b)("inlineCode",{parentName:"p"},"World"),' instance to query entites by what types of Components are attached to them. There is no need to define a "Query" ahead of time. For a complete list, check out the ',Object(o.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/_src_world_.world.html"},"World Instance Methods")," in the API Documentation. Some highlights include:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},'// `world.locate()` "locates" a single entity based on its Components.\nconst entity1 = world.locate([Component1, Component2]);\n\n// `world.grabAll "Grabs" all entities that have a component of the given type attached,\n// as well as the actual component instance.\nworld.grabAll(Component1).forEach(({ entity, component }) => /* do greate things */)\n')))}d.isMDXComponent=!0}}]);