(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{109:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return g}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),d=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,g=u["".concat(o,".").concat(m)]||u[m]||p[m]||a;return n?i.a.createElement(g,s(s({ref:t},l),{},{components:n})):i.a.createElement(g,s({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var r=n(3),i=n(7),a=(n(0),n(109)),o={id:"Getting_Started",title:"Getting Started",sidebar_label:"Getting Started",slug:"getting-started"},s={unversionedId:"Getting_Started",id:"Getting_Started",isDocsHomePage:!1,title:"Getting Started",description:"What is ECS?",source:"@site/docs/Getting_Started.md",slug:"/getting-started",permalink:"/ecstatic-doc-site/docs/getting-started",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/Getting_Started.md",version:"current",sidebar_label:"Getting Started"},c=[{value:"What is ECS?",id:"what-is-ecs",children:[]},{value:"Setup",id:"setup",children:[{value:"Creating a World instance",id:"creating-a-world-instance",children:[]},{value:"Creating and Registering Systems",id:"creating-and-registering-systems",children:[]},{value:"Creating Entities and adding Components",id:"creating-entities-and-adding-components",children:[]},{value:"Querying Entities",id:"querying-entities",children:[]}]}],l={toc:c};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"what-is-ecs"},"What is ECS?"),Object(a.b)("hr",null),Object(a.b)("h2",{id:"setup"},"Setup"),Object(a.b)("h3",{id:"creating-a-world-instance"},"Creating a World instance"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"World")," in ECS contains all instances of entities, and also facilitates registering of systems. "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"\nconst world = new World();\n")),Object(a.b)("h3",{id:"creating-and-registering-systems"},"Creating and Registering Systems"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},'\n// Define the components that let the system identify which entities to run on.\n// In other words, if an entity has all the defined components, then the system will be called on it.\nconst systemComponents = [Component1, Component];\n\n// Systems are provided a number of helpful arguments to work on in the function body.\nconst systemFunction = (args) => {\n  const {\n    world, // the world instance\n    entity, // the current entity\n    components, // the current entity\'s components\n    index, // index of which entity of all entities that the system will run over\n    isFirst, // If this is the first entity to run in this system pass\n    isLast, // If this is the last entity to be run over in this system pass.\n    size // The count of entities that match the given system component requirements.\n  } = args;;\n}\n\n\n// Register the components and system function together on the world.\n// This will return a function that should be called in a loop along with\n// all other systems, usually once each "tick".\nconst firstSystem = world.createSystem(systemComponents, systemFunction)\n\n\n// Running every system in a loop allows for changes in components to be picked up, adding\n// a degree of declarativity, but is not required.\n(function run() {\n  firstSystem();\n\n  window.requestAnimationFrame(run);\n})()\n')),Object(a.b)("h3",{id:"creating-entities-and-adding-components"},"Creating Entities and adding Components"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"\nclass MyComponent {}\n\nconst myEntity = world.createEntity();\n\nmyEntity.add(new MyComponent());\n")),Object(a.b)("h3",{id:"querying-entities"},"Querying Entities"),Object(a.b)("p",null,"There are many methods available on the ",Object(a.b)("inlineCode",{parentName:"p"},"World"),' instance to query entites by what types of Components are attached to them. There is no need to define a "Query" ahead of time. For a complete list, check out the ',Object(a.b)("a",{parentName:"p",href:"https://brochington.github.io/ecstatic/classes/_src_world_.world.html"},"World Instance Methods")," in the API Documentation. Some highlights include:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},'// `world.locate()` "locates" a single entity based on its Components.\nconst entity1 = world.locate([Component1, Component2]);\n\n// `world.grabAll "Grabs" all entities that have a component of the given type attached,\n// as well as the actual component instance.\n\nworld.grabAll(Component1).forEach(({ entity, component }) => /* do greate things */)\n\n')))}d.isMDXComponent=!0}}]);